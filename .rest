

### 1. Test API Health
GET http://localhost:5001/api/user/Test
Content-Type: application/json

###

### 2. Create a New User (POST)
POST http://localhost:5001/api/user/create
Content-Type: application/json

{
  "FirstName": "J",
  "LastName": "Doe",
  "Email": "john.doe@example.com",
  "Password": "password123",
  "RecurringDays": 7,
  "Role": 3,
  "Points": {
    "AllTimePoints": 1000,
    "PointAmount": 0,
    "Items": []
  }
}

###

### 3. Get All Users (GET)
GET http://localhost:5001/api/user/all
//Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

###

### 4. Get User by ID (GET)
GET http://localhost:5001/api/user/{079b196b-ccb3-4654-8f07-53b251b8079d}
//Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

Content-Type: application/json

###

### 5. Update User by ID (PUT)
PUT http://localhost:5001/api/user/{079b196b-ccb3-4654-8f07-53b251b8079d}
//Authorization: Bearer YOUR_ACCESS_TOKEN_HERE
Content-Type: application/json

{
  "FirstName": "Jane",
  "LastName": "Doe",
  "Email": "jane.doe@example.com",
  "Password": "newpassword123",
  "RecurringDays": 10
}

###

### 6. Delete User by ID (DELETE)
DELETE http://localhost:5001/api/user/{1113d1a7-3ccc-4fc0-b329-f600e314b0e3}
//Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

//CHANGE READOUT, WORKS!
Content-Type: application/json

###

### 7. Login with Correct Password
POST http://localhost:5001/api/auth/login
Content-Type: application/json

{
  "Email": "john.doe@example.com",
  "Password": "password123"
}

###

### 8. Login with Wrong Password
POST http://localhost:5001/api/auth/login
Content-Type: application/json

{
  "Email": "john.doe@example.com",
  "Password": "password122"
}

###

### 9. Get User Profile (Authenticated Request)
GET http://localhost:5001/api/user/all
Authorization: Bearer YOUR_ACCESS_TOKEN_HERE

###
### 1. Get User Points
GET http://localhost:5001/api/points/{e4f85926-770f-4b45-80a2-99d323ebeb52}
Content-Type: application/json

###

### 2. Add Points to User
### 2. Add Points to User
POST http://localhost:5001/api/points/{e4f85926-770f-4b45-80a2-99d323ebeb52}/add
Content-Type: application/json

100
###

### 3. Update User Points
PUT http://localhost:5001/api/points/{0f22cc4c-9e45-47dd-af83-b7db0752188c}/update
Content-Type: application/json

500


###

### 4. Get User Level
GET http://localhost:5001/api/points/{0f22cc4c-9e45-47dd-af83-b7db0752188c}/level
Content-Type: application/json

###

### Create a new Event
POST http://localhost:5001/api/event/create
Content-Type: application/json

{
  "Id": "",  // Laat dit veld als lege GUID voor automatisch genereren
  "Title": "Sample Event",
  "Description": "Description of the event",
  "StartTime": "2024-12-01T10:00:00",
  "EndTime": "2024-12-01T12:00:00",
  "Location": "Amsterdam",
  "Approval": true
}
### Test API Health
GET http://localhost:5001/api/events/Test
Content-Type: application/json
### Create a new Event
POST http://localhost:5001/api/events/create
Content-Type: application/json

{
  "Title": "Sample Event",
  "Description": "Description of the event",
  "StartTime": "2024-12-01T10:00:00",
  "EndTime": "2024-12-01T12:00:00",
  "Location": "Amsterdam",
  "Approval": true
}
### Test API Health
GET http://localhost:5001/api/eventattendance/Test
Content-Type: application/json

### Register a new Event Attendance
POST http://localhost:5001/api/eventattendance/register
Content-Type: application/json

{
  "UserId": "E4F85926-770F-4B45-80A2-99D323EBEB52",  // Vervang door een echte User ID
  "EventID": "5A285679-F4C0-4A16-92B2-C8371B56EA5A", // Vervang door een echt Event ID
  "Rating": 5,
  "Feedback": "Great event!"
}
